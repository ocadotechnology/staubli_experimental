<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="pushMotion" access="public">
    <Locals>
      <Local name="l_bOk" type="bool" xsi:type="array" size="1" />
      <Local name="l_nCounter" type="num" xsi:type="array" size="1" />
      <Local name="l_nJointError" type="num" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  switch rosGenericMsg.header.nMsgType
    case 11
      mTrajPt.nSequence=rosTrajPtMsg.jointTrajPt.nSeq
      // ROS joint position values are in rad, but VAL3 uses degrees
      mTrajPt.jJointRx.j1=rosTrajPtMsg.jointTrajPt.nJoints[0] * nRad2Deg
      mTrajPt.jJointRx.j2=rosTrajPtMsg.jointTrajPt.nJoints[1] * nRad2Deg
      mTrajPt.jJointRx.j3=rosTrajPtMsg.jointTrajPt.nJoints[2] * nRad2Deg
      mTrajPt.jJointRx.j4=rosTrajPtMsg.jointTrajPt.nJoints[3] * nRad2Deg
      mTrajPt.jJointRx.j5=rosTrajPtMsg.jointTrajPt.nJoints[4] * nRad2Deg
      mTrajPt.jJointRx.j6=rosTrajPtMsg.jointTrajPt.nJoints[5] * nRad2Deg
      // from industrial_robot_client/src/joint_trajectory_interface.cpp
      // JointTrajectoryInterface::trajectory_to_msgs()
      // JointTrajectoryInterface::calc_speed()
      // velocity is converted to a scalar value representing % of max velocity,
      // such that 0.2 = 20% of maximum joint speed
      mTrajPt.mDesc.vel=rosTrajPtMsg.jointTrajPt.nVelocity * 100.0
      mTrajPt.nDuration=rosTrajPtMsg.jointTrajPt.nDuration

    break
    case 14
      mTrajPt.nSequence=rosTrajPtFMsg.jointTrajPtFull.nSeq
      mTrajPt.nDuration=rosTrajPtFMsg.jointTrajPtFull.nTime
      // ROS joint position values are in rad, but VAL3 uses degrees
      mTrajPt.jJointRx.j1=rosTrajPtFMsg.jointTrajPtFull.nPositions[0] * nRad2Deg
      mTrajPt.jJointRx.j2=rosTrajPtFMsg.jointTrajPtFull.nPositions[1] * nRad2Deg
      mTrajPt.jJointRx.j3=rosTrajPtFMsg.jointTrajPtFull.nPositions[2] * nRad2Deg
      mTrajPt.jJointRx.j4=rosTrajPtFMsg.jointTrajPtFull.nPositions[3] * nRad2Deg
      mTrajPt.jJointRx.j5=rosTrajPtFMsg.jointTrajPtFull.nPositions[4] * nRad2Deg
      mTrajPt.jJointRx.j6=rosTrajPtFMsg.jointTrajPtFull.nPositions[5] * nRad2Deg
      // from industrial_robot_client/src/joint_trajectory_interface.cpp
      // JointTrajectoryInterface::trajectory_to_msgs()
      // JointTrajectoryInterface::calc_speed()
      // velocity is converted to a scalar value representing % of max velocity,
      // such that 0.2 = 20% of maximum joint speed
      mTrajPt.mDesc.vel=rosTrajPtFMsg.jointTrajPtFull.nVelocities[0] * 100.0
      // not sure about accelerations as yet
      mTrajPt.mDesc.accel=rosTrajPtFMsg.jointTrajPtFull.nAccelerations[0]
      mTrajPt.mDesc.decel=mTrajPt.mDesc.accel
    break
    default
    break
  endSwitch

  if (mTrajPt.nSequence==-2)
    // set flag to stop immediately
    bStopNow=true
  else
    // only push motion into buffer if not a STOP message
    // and if joint positions are within software joint limits
    if (isInRange(mTrajPt.jJointRx))
      call libTrajPtBuffer:push(mTrajPt,l_bOk)
    else
      l_bOk = false
    endIf
    
    if (l_bOk==false)
      // could not push trajectory point into buffer
      // thus ACK should flag FAILURE, but only if comm type is request
      if (rosGenericMsg.header.nCommType==2)
        switch rosGenericMsg.header.nMsgType
          case 11
            rosTrajPtAck.header.nReplyCode=2
          break
          case 14
            rosTrajPtFAck.header.nReplyCode=2
          break
          default
          break
        endSwitch
      endIf
    endIf
    
  endIf

  // move on to state 5: send Ack
  nDataInState=5
end]]></Code>
  </Program>
</Programs>