<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="start">
    <Code><![CDATA[begin 
  // feedback task will run every 20ms (50Hz)
  nFbkPeriod=0.02
  //nFbkPeriod = 0.032 // 30Hz
  //nFbkPeriod = 0.05  // 20Hz
  //nFbkPeriod = 1.0   //  1Hz
  
  // motion control task will run every 4ms (250Hz)
  nMotionPeriod = 0.004
  //nMotionPeriod=0.012  // 83Hz
  //nMotionPeriod = 0.05 // 20Hz
  
  // data (trajectory) reception task will run every 4ms (250Hz)
  nTrajReception = 0.004
  // not in use at the moment
  nScreenUpdate = 1.0
  
  nDeg2Rad = 3.14159265359 / 180.0
  nRad2Deg = 180.0 / 3.14159265359

  sStreamTaskName = "streamerTask"
  sTrajPtTaskName = "trajPtTask"
  sMotionTaskName = "motionTask"
  sScreenTaskName = "screenTask"
  sHtbtTaskName = "htbtTask"

  // initialise TCP/IP parameters
  call initParams()
  // setup prefix and header of ROS messages
  call setupRosMsgs()
  
  // socket connections: initially disconnected
  nDataIn = 0
  nDataOut = 0
  
  // flags to control tasks: should start sending/receiving
  bSendData = true
  bRecvData = true
  bCheckHeartbeat = false
  bOverwriteVel = false
  
  nPtsPopped = 0
  nMovePts = 0
  
  // debug status
  nDebugStatus = 0
  
  // ensure motion buffer is empty
  call libTrajPtBuffer:clear()
  call libMoveBuffer:clear()

  // flush buffer of incoming socket
  clearBuffer(siTcpIpMotion)
  // flush buffer of outgoing socket
  clearBuffer(siTcpIpFbk)
  
  // check if robot is not in emergency stop and wait until estop is reset
  if (esStatus() == 2)
    popUpMsg("Please reset E-Stop")
    wait(esStatus() < 2)
  endIf
  
  // before anything else, enable power (only works if robot is in remote mode)
  if (!isPowered())
    if (workingMode() >= 4)
      do
        enablePower()
        delay(2)
      until isPowered()
    else
      popUpMsg("Power must be enabled manually")
    endIf
  endIf
  
  // reset motion, potentially setting a start joint position for calling autoConnect() in the future
  resetMotion()

  // create joint state and robot status streamer task to send data to industrial_robot_client
  taskCreateSync sStreamTaskName, nFbkPeriod, bFbkOverrun, dataStreamer()
  
  // create trajectory point task to receive data from industrial_robot_client
  taskCreateSync sTrajPtTaskName, nTrajReception, bTrajPtOverrun, dataReceiver()
  //taskCreate sTrajPtTaskName, 100, dataReceiver()
  
  // create motion task to synchronously apply motion commands to robot
  taskCreateSync sMotionTaskName, nMotionPeriod, bMotionOverrun, motionControl()

  // create synchronous task to update screen
  //taskCreateSync sScreenTaskName, nScreenUpdate, bScreenOverrun, screenUpdate()
  taskCreate sScreenTaskName, 10, screenUpdate()
  
  // create asynchronous task to receive heartbeat on port 11002
  taskCreate sHtbtTaskName, 10, recvHeartbeat()

end]]></Code>
  </Program>
</Programs>